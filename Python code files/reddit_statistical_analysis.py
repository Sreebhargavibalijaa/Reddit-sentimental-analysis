# -*- coding: utf-8 -*-
"""reddit_statistical_analysis (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LEjoeEYdaAymRdhEepG3-Xi7GnT67EMJ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rc
from scipy.stats import chi2_contingency, ttest_ind, ttest_rel, f_oneway
# %matplotlib inline
import statsmodels.api as sm
from statsmodels.formula.api import ols
import seaborn as sns
rc('pdf', fonttype=42)

import csv
#from io import open
def load_data():
    data = []

    label = ['image_id','unixtime','rawtime','title','total_votes','reddit_id','number_of_upvotes',\
    'subreddit','number_of_downvotes','localtime','score','number_of_comments','username',\
    'undefined1','undefined2', 'undefined3']

    with open('submissions.csv') as csvfile:
        csvReader = csv.reader(csvfile)
        for row in csvReader:
            if row[0] == '#image_id':
                continue
            d = {}
            for i,elem in enumerate(row):
                d[label[i]] = elem
            data.append(d)

    return data

final_dataset = load_data()
final_dataset = pd.DataFrame(final_dataset)
final_dataset = final_dataset[['total_votes','rawtime','score','number_of_comments','subreddit','title']]
final_dataset = final_dataset.dropna()

# final_dataset = final_dataset["number_of_comments","total_votes","score","total_votes","rawtime"]
from collections import defaultdict
import datetime
def convertNumToDay(num):
 weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
 return weekdays[num-1]
def convertHourToTime(num):
    if num == 0:
        timeOfDay = '12 AM'
    elif num <= 11:
        timeOfDay = str(num) + ' AM'
    elif num == 12:
        timeOfDay = '12 PM'
    else: 
        timeOfDay = str(num-12) + ' PM'
    return timeOfDay
r_score = defaultdict(list)
r_comm = defaultdict(list)
r_posts = {}
r_votes = defaultdict(list)
r_dayofweek = {}
r_hour = {}
length=-1
for index,i in final_dataset.iterrows():
  if(i['subreddit'] == "gif"):
    if(int(i['total_votes'])+int(i['number_of_comments'])<100):
      a = i["rawtime"]
      time = int(a[11:13])-1
      r_score[len(i["title"])].append(int(i['score']))
      r_comm[len(i["title"])].append(int(i['number_of_comments']))
      r_votes[len(i["title"])].append(int(i['total_votes'])+int(i['number_of_comments']))
      a = (i['rawtime'])
      today = datetime.datetime(int(a[:4]), int(a[5:7]), int(a[8:10]),int(a[11:13]),int(a[14:16]),int(a[17:19]))
      r_dayofweek[len(i["title"])] = convertNumToDay(today.weekday())
      r_hour[len(i["title"])] = convertHourToTime(int(a[11:13]))
      if   len(i["title"]) in r_posts.keys():  
          r_posts[len(i["title"])] += 1  
      else:  
          r_posts[len(i["title"])] = 1  



r_score_f = {}
for i in r_posts.keys():
  r_score_f[i] = sum(r_score[i])/len(r_score[i])
r_votes_f = {}
for i in r_votes.keys():
  r_votes_f[i] = sum(r_votes[i])/len(r_votes[i])
r_comm_f = {}
for i in r_comm.keys():
  r_comm_f[i] = sum(r_comm[i])/len(r_comm[i])

r_comm_f
a = [r_score_f,r_comm_f,r_votes_f,r_posts]
X= pd.DataFrame(a)
X= X.T
print(X)
print(X.columns)
data = X.rename(columns ={0:"avg_score",1:"avg_comments",2:"num_posts","index":"length_title",3:"Total_votes"})
a = data.reset_index(inplace=True)
data.corr()
r_comm_f
a = [r_score_f,r_comm_f,r_posts,r_votes_f]
X= pd.DataFrame(a)
X= X.T
print(X)
print(X.columns)
data = X.rename(columns ={0:"avg_score",1:"avg_comments",2:"num_posts","index":"length_title",3:"Total_votes"})
a = data.reset_index(inplace=True)
data.corr()

data.corr()
data

data = data.rename(columns ={0:"avg_score",1:"dayofweek",2:"hourofday",3:"num_posts","index":"length_title","index":"avg_length"})
print(data)

X = data['avg_length']
Y = data['num_posts']
Size = data['num_posts']
plt.scatter(x = X, y = Y, s = Size)
plt.title('Length of Post Title vs Average Score of Post')
plt.xlabel('Length of Post Title (# of Characters)')
plt.ylabel('NUmber of posts')
plt.show()

X = data['Total_votes']
Y = data['avg_score']
Size = data['avg_score']
plt.scatter(x = X, y = Y, s = Size)
plt.title('Length of Post Title vs Average Score of Post')
plt.xlabel('Length of Post Title (# of Characters)')
plt.ylabel('Average Score of Post')
plt.show()

X = data.index
Y = data['avg_comments']
Size = data['avg_comments']
plot = plt.scatter(x = X, y = Y, s = Size)
plt.title('Avg Number of Comments vs Length of Post title')
plt.xlabel('Length of Post Title (# of Characters)')
plt.ylabel('Average Comments')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn import model_selection
from sklearn import linear_model
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
Y = data['avg_score']
X = data['Total_votes']

linear_regression = LinearRegression()
reshapedX = X.values.reshape(-1, 1)
linear_regression.fit(reshapedX, Y)
model = linear_regression.predict(reshapedX)

plt.figure(figsize=(10,8));
plt.scatter(X, Y);
plt.plot(X, model);
plt.title('Total number of votes vs Average Score of Post',fontsize=15)
plt.xlabel('Total number of votes',fontsize=15)
plt.ylabel('Average Score of Post',fontsize=15)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn import model_selection
from sklearn import linear_model
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
Y = data['avg_score']
X = data['avg_comments']

linear_regression = LinearRegression()
reshapedX = X.values.reshape(-1, 1)
linear_regression.fit(reshapedX, Y)
model = linear_regression.predict(reshapedX)

plt.figure(figsize=(10,8));
plt.scatter(X, Y);
plt.plot(X, model);
plt.title('Score to the comments')
plt.xlabel('Average number of comments')
plt.ylabel('Average Scores of posts')
plt.show()

Image_votes_total = final_dataset[['image_id','total_votes','score','username']]
from collections import defaultdict

user_votes = defaultdict(list)

for index,i in Image_votes_total.iterrows():
  a =[] 
  i['total_votes'] = int(i['total_votes'])
  user_votes[i['image_id']].append(i['total_votes'])
user_votes_f = {}
for i in user_votes.keys():
   user_votes_f[i] = sum(user_votes[i])/len(user_votes[i])

user_scores = defaultdict(list)

for index,i in Image_votes_total.iterrows():
  a =[] 
  i['score'] = int(i['score'])
  user_scores[i['image_id']].append(i['score'])
user_scores_f= {}
for i in user_scores_f.keys():
   user_scores_f[i] = sum(user_scores_f[i])/len(user_scores_f[i])

sorted_dict = {}
sorted_keys = sorted(user_votes_f, key=user_votes_f.get,reverse=True)  # [1, 3, 2]

for w in sorted_keys:
    sorted_dict[w] = user_votes_f[w]
top_50_images = [int(v) for v in sorted_dict.keys()]
top_50_images = top_50_images[:50]
i_s = {}
for g in top_50_images:
  a=[]
  for index,i in Image_votes_total.iterrows():
    if(int(i['image_id']) == g):
      a.append(i['username'])
  i_s[g]=len(a)
a = i_s.values()
b = i_s.keys()
import matplotlib.pyplot as plt

# Some properties for the plot
alpha = 0.7
bar_width = 0.35
# LAbels for the both axis
plt.xlabel("Popular images based on user interactions")
plt.ylabel('User interactions')
# bar-plot
bar1 = plt.bar(np.arange(len(a)) + bar_width, a, bar_width, align='center', color='b', label='a-List')
bar2 = plt.bar(range(len(b)), b, bar_width, align='center', alpha=alpha, color='g', label='b-List')



#######################################
sorted_dict = {}
sorted_keys = sorted(user_scores_f, key=user_scores_f.get,reverse=True)  # [1, 3, 2]

for w in sorted_keys:
    sorted_dict[w] = user_scores_f[w]
top_50_images = [int(v) for v in sorted_dict.keys()]
top_50_images = top_50_images[:50]
i_s = {}
for g in top_50_images:
  a=[]
  for index,i in Image_votes_total.iterrows():
    if(int(i['image_id']) == g):
      a.append(i['username'])
  i_s[g]=len(a)
# Some properties for the plot
import matplotlib.pyplot as plt

a = i_s.values()
b = i_s.keys()
alpha = 0.7
bar_width = 0.35
# LAbels for the both axis
plt.xlabel("Popular images based on user upvotes")
plt.ylabel('Count of users interacted')
# bar-plot
bar1 = plt.bar(np.arange(len(a)) + bar_width, a, bar_width, align='center', color='b', label='a-List')
bar2 = plt.bar(range(len(b)), b, bar_width, align='center', alpha=alpha, color='g', label='b-List')

import numpy as np 
import matplotlib.pyplot as plt 
  
X = ['Group A','Group B','Group C','Group D']
Ygirls = [10,20,20,40]
Zboys = [20,30,25,30]
  
X_axis = np.arange(len(X))
  
plt.bar(X_axis - 0.2, Ygirls, 0.4, label = 'Girls')
plt.bar(X_axis + 0.2, Zboys, 0.4, label = 'Boys')
  
plt.xlabel("Groups")
plt.ylabel("Number of Students")
plt.title("Number of Students in each group")
plt.legend()
plt.show()

chi = {}
for h in top_50_images:
  for index,i in final_dataset.iterrows():
    if(h== i["image_id"]):
        print(i["user_name"])
        chi[h].append(i["user_name"])

plot(x,y)

is_count = {}
for i in i_s.keys():
   is_count[i] = sum(iv[i])/len(iv[i])

print(is_count)



#caries to the sugars
# print(final_dataset['image_id'])
a =['number_of_comments', 'number_of_downvotes', 'number_of_upvotes']
final_dataset1 = final_dataset1[a]
# print(df_data_c)
# import matplotlib.pyplot as plt
# import seaborn as sns
# sns.set(font_scale=1.2)
# df_corr = df_data_c.corr()
# print(df_corr)
# print(df_corr)
# print(df_corr)
# print(df_corr)
# print(df_corr)
# ax = sns.heatmap(df_corr, annot=True, fmt=".3f",cmap="YlGnBu")
# plt.xticks(rotation = 70)
print(final_dataset1.corr())

x= df_data_c[['number_of_comments',"number_of_downvotes"]]
dataset = 'modcloth'
df_review = pd.DataFrame()  
# df_review = pd.read_csv('/content/submissions.csv')
df_review['timestamp'] = (df_data_c['number_of_comments'])
df_review['fit_score'] = (df_data_c['number_of_downvotes'])
# df_review['fit_score'].loc[df_review['fit'] == 'Just right'] = 1.0
# df_review['fit_score'].loc[df_review['fit'].isna()] = None
# df_review['timestamp'] = pd.to_datetime(df_review['timestamp'])
df_review.corr()
df_review.corr(method ='pearson')
df_review.head()
print(df_review.corr())